# shellcheck shell=bash

argocdAddCluster() {
    local hubCluster=$1
    local managedCluster=$2
    local clusterTypeLabel=$3

    makeSecretForCluster $managedCluster $managedCluster $LOCAL_ACCESS |
    setNamespacedName argocd $managedCluster |
    setLabel argocd.argoproj.io/secret-type cluster | 
    setLabel cluster-region local | 
    setLabel cluster-type $clusterTypeLabel | 
    setLabel cluster-name $managedCluster | 
    kubectl apply --context kind-${hubCluster} -f -
}


CreateAgentSecret() {
    local upstreamCluster=$1
    local downstreamCluster=$2
    local secretName=${downstreamCluster}
    local internal=$3
    local tmpfile=$(mktemp /tmp/kubeconfig-internal.XXXXXX)
    if [ $internal == "true" ]; then
        ${KIND_BIN} export kubeconfig --name ${upstreamCluster} --kubeconfig ${tmpfile}
    else 
        secretName=${downstreamCluster}-external
        ${KIND_BIN} export kubeconfig --name ${upstreamCluster} --kubeconfig ${tmpfile}
    fi
    local server=$(kubectl --kubeconfig ${tmpfile} config view -o jsonpath="{$.clusters[?(@.name == 'kind-${upstreamCluster}')].cluster.server}")
    local caData=$(kubectl --kubeconfig ${tmpfile} config view --raw -o jsonpath="{$.clusters[?(@.name == 'kind-${upstreamCluster}')].cluster.certificate-authority-data}")
    local certData=$(kubectl --kubeconfig ${tmpfile} config view --raw -o jsonpath="{$.users[?(@.name == 'kind-${upstreamCluster}')].user.client-certificate-data}")
    local keyData=$(kubectl --kubeconfig ${tmpfile} config view --raw -o jsonpath="{$.users[?(@.name == 'kind-${upstreamCluster}')].user.client-key-data}")
    rm -f ${tmpfile}

    kubectl create namespace mctc-system --context kind-${downstreamCluster} || true
    cat <<EOF | kubectl apply --context kind-${downstreamCluster} -f -
kind: Secret
apiVersion: v1
metadata:
  name: ${secretName}
  namespace: mctc-system
  labels:
    argocd.argoproj.io/secret-type: cluster
stringData:
  config: >-
    {
      "tlsClientConfig":
        {
          "insecure": true,
          "caData": "${caData}",
          "certData": "${certData}",
          "keyData": "${keyData}"
        }
    }
  name: ${downstreamCluster}
  server: ${server}
type: Opaque
EOF
}
