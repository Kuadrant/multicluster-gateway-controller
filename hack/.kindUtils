# shellcheck shell=bash

kindCreateCluster() {
  local cluster=$1;
  local port80=$2;
  local port443=$3;
  local idx=$4
  # Each cluster should have a different service & pod network.
  # This allows a flat network to be established if submariner is used
  local pod_cidr="10.24${idx}.0.0/16"
  local service_cidr="100.9${idx}.0.0/16"
  local dns_domain="${cluster}.local"
  export KIND_EXPERIMENTAL_DOCKER_NETWORK=mgc
  cat <<EOF | ${KIND_BIN} create cluster --name ${cluster} --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  podSubnet: ${pod_cidr}
  serviceSubnet: ${service_cidr}
nodes:
- role: control-plane
  image: kindest/node:v1.26.0
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  - |
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: ClusterConfiguration
    metadata:
      name: config
    networking:
      podSubnet: ${pod_cidr}
      serviceSubnet: ${service_cidr}
      dnsDomain: ${dns_domain}
  extraPortMappings:
  - containerPort: 80
    hostPort: ${port80}
    protocol: TCP
  - containerPort: 443
    hostPort: ${port443}
    protocol: TCP
EOF

  mkdir -p ${TMP_DIR}/kubeconfigs
  ${KIND_BIN} export kubeconfig -n ${cluster} --kubeconfig ${TMP_DIR}/kubeconfig --internal
  ${KIND_BIN} get kubeconfig --name ${cluster} > ${TMP_DIR}/kubeconfigs/${cluster}.kubeconfig
  ${KIND_BIN} export kubeconfig --name ${cluster} --kubeconfig ${TMP_DIR}/kubeconfigs/internal/${cluster}.kubeconfig --internal
}

kindSetupMGCClusters() {
    local controlPlaneName=$1
    local dataPlaneName=$2
    local port80=$3
    local port443=$4
    local dataPlaneClusterCount=$5

    # Create network for the clusters
    # TODO: podman equivs of these options?
    $CONTAINER_RUNTIME_BIN network create -d bridge --subnet 172.31.0.0/16 ${KIND_CLUSTER_DOCKER_NETWORK} --gateway 172.31.0.1 \
      -o "com.docker.network.bridge.enable_ip_masquerade"="true" \
      -o "com.docker.network.driver.mtu"="1500"

    # Create Kind control plane cluster
    kindCreateCluster ${controlPlaneName} ${port80} ${port443}

    # Add workload clusters if dataPlaneClusterCount is > 0
    if [[ -n "${dataPlaneClusterCount}" ]]; then
      for ((i = 1; i <= ${dataPlaneClusterCount}; i++)); do
        kindCreateCluster ${dataPlaneName}-${i} $((${port80} + ${i})) $((${port443} + ${i})) $((${i} + 1))
      done
    fi
}
